from androguard.core.bytecodes.apk import APK
import argparse, hashlib


def check(apk_name):
    app_object = APK(apk_name)
    apk_min_sdk_version, android_version = "27", "8.0.0"
    if app_object.is_signed():
        print(str(apk_name) + " is signed")
        if app_object.is_signed_v1:
            print("v1 scheme: True")
            if app_object.is_signed_v2():
                print("v2 scheme: True")
            else:
                print("v2 scheme: False")
            if app_object.is_signed_v3():
                print("v3 scheme: True")
            else:
                print("v3 scheme: False")
            if app_object.is_signed_v2() or app_object.is_signed_v3():
                apk_min_sdk_version, android_version = "24", "7.0.0"
            if app_object.get_min_sdk_version() < apk_min_sdk_version:
                print("minSdkVersion: "+app_object.get_min_sdk_version()+" ")
                print(str(apk_name) + " " + str(hashlib.md5(open(apk_name,'rb').read()).hexdigest())+" is \033[31mVULNERABLE\033[0m")
                print(str(apk_name) + " can be exploited on devices running Android version < " + android_version)
        else:
            print(str(apk_name) + " is NOT vulnerable")
            exit()    
    else: 
        print(str(apk_name) + " is NOT signed")
        exit()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("apk_filename", metavar="apk", type=str, help="APK to test")
    args = parser.parse_args()
    print("\nChecking if " + str(args. apk_filename) + " is vulnerable to CVE-2017-13156 vulnerability\n")
    print(str(args. apk_filename) + " md5: "+str(hashlib.md5(open(args. apk_filename,'rb').read()).hexdigest())+"\n")
    app_object = args. apk_filename
    check(app_object)
    print("")

main()